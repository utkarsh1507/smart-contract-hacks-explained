A cross-functional reentrancy attack is a type of reentrancy vulnerability in smart contracts where the attacker doesn’t exploit the same function being reentered,
but instead calls back into a different function of the same contract (or another vulnerable contract) before the first function finishes execution
Why dangerous?

Developers often think only about re-entering the same function, but if other functions rely on the same storage variables, they can also be exploited.

It bypasses protections like "reentrancy guards" if applied only to specific functions and not globally.

Mitigation:

Checks-Effects-Interactions Pattern → Update state before external calls.

Reentrancy Guards (mutex/nonReentrant) → Apply at contract level or across functions that touch the same state.

Pull over Push Payments → Let users withdraw funds instead of sending them automatically.
